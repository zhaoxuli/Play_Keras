# -*- coding: utf-8 -*-

import numpy as np
import os
import keras
from keras import optimizers,initializers
from keras.models import Sequential
from keras.layers.normalization import BatchNormalization
from keras.callbacks import ModelCheckpoint,LearningRateScheduler
from keras.utils.np_utils import to_categorical
from keras import regularizers
from keras import backend as K
from keras.layers import Dense, Dropout, Activation, Flatten,Conv2D, MaxPooling2D
from keras.preprocessing.image import ImageDataGenerator

Num_classes =4
img_nums = 137
img_w = 64
img_h = 64
img_c = 1
epoch_num  =200
Batch_size = 6
data_path = '../data_train/train.npy'
models_path = './models'
log_file = './train.log'

if os.path.exists(models_path) ==False:
    os.makedirs(models_path)

all_data = np.load(data_path)
x_train = all_data[:,:-1]
y_train = all_data[:,-1:]
y_train = to_categorical(y_train,num_classes = Num_classes)
x_train = np.reshape(x_train,(img_nums,img_h,img_w,img_c))
#test_data = np.load(test_path)
#x_test = all_data[:,:-1]
#y_test = all_data[:,-1:]
#y_test = to_categorical(y_test,num_classes = Num_classes)
#x_test = np.reshape(x_train,(x_test.shape[0],img_h,img_w,img_c))

# Network

model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=x_train.shape[1:]))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(128, (3, 3), padding='same'))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Conv2D(128, (3, 3)))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(BatchNormalization())
model.add(Activation('relu'))
model.add(Dropout(0.2))
model.add(Dense(Num_classes))
model.add(Activation('softmax'))

# policy
adam =optimizers.Adam(lr=0.001)
#SGD =optimizers.SGD(lr=0.001,momentum=0.9,nesterov=True)
model.compile(loss = 'categorical_crossentropy', optimizer = adam,metrics=['accuracy'])
# checkpoint
def scheduler(epoch):
   if epoch>0 and epoch%20==0:
        lr = K.get_value(model.optimizer.lr)
        K.set_value(model.optimizer.lr,lr*0.8)
        print 'lr changed to ',lr*0.8
   return  K.get_value(model.optimizer.lr)
#callbacks
filepath=models_path+os.sep+"model-{epoch:02d}-{acc:.2f}-{loss:.2f}.hdf5"
checkpoint = ModelCheckpoint(filepath, monitor='loss', verbose=0, save_best_only=False,mode='max')
lr_decay = LearningRateScheduler(scheduler)
callbacks_list = [checkpoint,lr_decay]

#image processing
datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        shear_range=0.,  # set range for random shear
        zoom_range=0.,  # set range for random zoom
        channel_shift_range=0.,  # set range for random channel shifts
        fill_mode='nearest',  # set mode for filling points outside the input boundaries
        cval=0.,  # value used for fill_mode = "constant"
        horizontal_flip=True,  # randomly flip images
        vertical_flip=True,  # randomly flip images
        rescale=None,  # set rescaling factor (applied before any other transformation)
        preprocessing_function=None,  # set function that will be applied on each input
        data_format=None,  # image data format, either "channels_first" or "channels_last"
        validation_split=0.1)  # fraction of images reserved for validation (strictly between 0 and 1)

datagen.fit(x_train,augment = True,rounds =3)
# Fit the model on the batches generated by datagen.flow().
hist = model.fit_generator(datagen.flow(x_train, y_train,batch_size=Batch_size),#validation_data=(x_test,y_test),
                           epochs=epoch_num,shuffle=True,callbacks=callbacks_list)
# fit
#hist = model.fit(x_train, y_train,batch_size = Batch_size ,epochs=epoch_num,
#                 shuffle=True,verbose=1,callbacks= callbacks_list)

file = open(log_file,'w')
ctx = str(hist.history)
file.write(ctx)
file.close



